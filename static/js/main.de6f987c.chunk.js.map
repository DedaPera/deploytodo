{"version":3,"sources":["components/ToDo.js","components/ReorderClear.js","components/Adding.js","components/ToDoList.js","App.js","index.js"],"names":["ToDo","id","toDo","isDone","handleCheck","deleteTask","useState","finish","setFinish","className","type","name","defaultChecked","onClick","onChange","ReorderClear","clearHandle","reorderHandle","disabled","Adding","addTask","newTask","setNewTask","value","placeholder","e","target","onKeyDown","key","ToDoList","setId","task","setTask","taskList","setTaskList","counter","newTaskList","map","filter","Boolean","updateCheckBox","checkField","record","txt","trim","length","charAt","toUpperCase","slice","console","log","newId","concat","text","includes","alert","forEach","push","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAqCeA,MAjCf,YAA8D,IAA9CC,EAA6C,EAA7CA,GAAIC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,WAAc,EAC/BC,mBAASH,GADsB,mBACpDI,EADoD,KAC5CC,EAD4C,KAW3D,OACE,0BAASC,UAAU,OAAnB,UACE,sBAAKA,UAAU,KAAf,UAAqBR,EAArB,OACA,qBAAKQ,UAAWF,EAAS,aAAe,eAAxC,SAAyDL,IACzD,uBACED,GAAG,WACHQ,UAAU,WACVC,KAAK,WACLC,KAAK,SACLC,eAAgBT,EAChBU,QAlBc,WAClBT,EAAYH,IAkBRa,SAAU,WACRN,GAAWD,MAGf,wBAAQE,UAAU,gBAAgBI,QAnBhB,WACpBR,EAAWJ,EAAIE,IAkBb,wB,MCDSY,MAzBf,YAAuD,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,cASnC,OACE,sBAAKR,UAAU,eAAf,UACE,wBACEA,UAAU,iBACVI,QAZgB,WACpBI,KAYIC,SAAS,OAHX,sBAOA,wBAAQT,UAAU,eAAeI,QAbjB,WAClBG,KAYE,2B,MCiBSG,MAlCf,YAA8B,IAAZC,EAAW,EAAXA,QAAW,EACGd,mBAAS,IADZ,mBACpBe,EADoB,KACXC,EADW,KAe3B,OACE,sBAAKb,UAAU,SAAf,UACE,uBACEA,UAAU,UACVC,KAAK,OACLa,MAAOF,EACPG,YAAY,iBACZV,SAAU,SAACW,GACTH,EAAWG,EAAEC,OAAOH,QAEtBI,UAjBgB,SAACF,GACP,UAAVA,EAAEG,MACJR,EAAQC,GACRC,EAAW,QAgBX,wBAAQb,UAAU,gBAAgBE,KAAK,SAASE,QAxB/B,WACnBO,EAAQC,GACRC,EAAW,KAsBT,uBC4ESO,MApGf,WAAqB,IAAD,EACEvB,mBAAS,GADX,mBACXL,EADW,KACP6B,EADO,OAEMxB,mBAAS,CAAEL,GAAIA,EAAIC,KAAM,QAASC,QAAQ,IAFhD,mBAEX4B,EAFW,KAELC,EAFK,OAIc1B,mBAAS,IAJvB,mBAIX2B,EAJW,KAIDC,EAJC,KAiClB,SAAS7B,EAAWJ,GAClB,IAAIkC,EAAU,EACRC,EAAcH,EACjBI,KAAI,SAACN,GACJ,OAAI9B,IAAO8B,EAAK9B,GACP,2BAAK8B,GAAZ,IAAkB9B,KAAMkC,IAEnB,QAERG,OAAOC,SACVL,EAAYE,GACZN,IAAQK,GAIV,IAAMK,EAAiB,SAACvC,EAAIwC,GAC1B,IAAML,EAAcH,EAASI,KAAI,SAACK,GAChC,OAAIzC,IAAOyC,EAAOzC,GACT,2BAAKyC,GAAZ,IAAoBvC,QAASsC,IAExBC,KAETR,EAAYE,IAsBd,OACE,sBAAK3B,UAAU,WAAf,UACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CAAQW,QApEE,SAACuB,GACf,GAA0B,IAAtBA,EAAIC,OAAOC,OAAc,CAG3BF,GAFAA,EAAMA,EAAIC,QAEAE,OAAO,GAAGC,cAAgBJ,EAAIK,MAAM,GAC9CC,QAAQC,IAAIP,GACZ,IAAIQ,EAAQlD,EAAK,EACXoB,EAAO,2BAAQU,GAAR,IAAc9B,GAAIA,EAAIC,KAAMyC,IACnCP,EAAcH,EAASmB,OAAO/B,GACpC,GAdkBgC,EAcDV,EAbZV,EAASI,KAAI,SAACK,GAAD,OAAYA,EAAOxC,QAAMoD,SAASD,GAelD,YADAE,MAAM,4BAGNzB,EAAMqB,GACNnB,EAAQX,GACRa,EAAYE,GApBG,IAACiB,KA0EhB,cAAC,EAAD,CAAcrC,YAtBA,WAClBkB,EAAY,IACZF,EAAQ,2BAAKD,GAAN,IAAY7B,KAAM,QAASC,QAAQ,KAC1C2B,EAAM,IAmBsCb,cAfxB,WACpB,IAAImB,EAAc,GACdD,EAAU,EACdF,EAASuB,SAAQ,SAACd,GAChBP,IACAC,EAAYqB,KAAZ,2BAAsBf,GAAtB,IAA8BzC,GAAIkC,QAEpCD,EAAYE,GACZN,IAAQK,SAUN,qBAAK1B,UAAU,OAAf,SACGwB,EAASI,KAAI,SAACK,GACb,OACE,cAAC,EAAD,aAEEtC,YAAaoC,EACbnC,WAAYA,GACRqC,GAHCA,EAAOxC,eCnFXwD,MATf,WACE,OACE,sBAAKjD,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,QCHNkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.de6f987c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './ToDo.css';\r\n\r\n// Format single task for rendering //\r\nfunction ToDo({ id, toDo, isDone, handleCheck, deleteTask }) {\r\n  const [finish, setFinish] = useState(isDone);\r\n  // Handle CheckBox\r\n  const checkHandle = () => {\r\n    handleCheck(id);\r\n  };\r\n  // Handle delete button\r\n  const deleteHandler = () => {\r\n    deleteTask(id, isDone);\r\n  };\r\n\r\n  return (\r\n    <section className='ToDo'>\r\n      <div className='id'>{id}.</div>\r\n      <div className={finish ? 'taskFinish' : 'taskUnfinish'}>{toDo}</div>\r\n      <input\r\n        id='checkBox'\r\n        className='checkBox'\r\n        type='checkbox'\r\n        name='isDone'\r\n        defaultChecked={isDone}\r\n        onClick={checkHandle}\r\n        onChange={() => {\r\n          setFinish(!finish);\r\n        }}\r\n      ></input>\r\n      <button className='deleteBtn btn' onClick={deleteHandler}>\r\n        Delete\r\n      </button>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from 'react';\r\nimport './ReorderClear.css';\r\n\r\n// Reorder or clear list\r\nfunction ReorderClear({ clearHandle, reorderHandle }) {\r\n  const handleReorder = () => {\r\n    reorderHandle();\r\n  };\r\n\r\n  const handleClear = () => {\r\n    clearHandle();\r\n  };\r\n\r\n  return (\r\n    <div className='reorderClear'>\r\n      <button\r\n        className='reorderBtn btn'\r\n        onClick={handleReorder}\r\n        disabled='true'\r\n      >\r\n        Disabled\r\n      </button>\r\n      <button className='clearBtn btn' onClick={handleClear}>\r\n        Clear All\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReorderClear;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport './Adding.css';\r\n\r\n// Add new task on list\r\nfunction Adding({ addTask }) {\r\n  const [newTask, setNewTask] = useState('');\r\n\r\n  const appendHandle = () => {\r\n    addTask(newTask);\r\n    setNewTask('');\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      addTask(newTask);\r\n      setNewTask('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='adding'>\r\n      <input\r\n        className='textbox'\r\n        type='text'\r\n        value={newTask}\r\n        placeholder='Enter new task'\r\n        onChange={(e) => {\r\n          setNewTask(e.target.value);\r\n        }}\r\n        onKeyDown={handleKeyDown}\r\n      ></input>\r\n      <button className='appendBtn btn' name='append' onClick={appendHandle}>\r\n        Enter\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Adding;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport './ToDoList.css';\r\nimport ToDo from './ToDo';\r\nimport ReorderClear from './ReorderClear';\r\nimport Adding from './Adding';\r\n\r\n// Create a list of task\r\nfunction ToDoList() {\r\n  const [id, setId] = useState(1);\r\n  const [task, setTask] = useState({ id: id, toDo: 'Empty', isDone: false });\r\n\r\n  const [taskList, setTaskList] = useState([]);\r\n\r\n  // Prevent of duplicate tasks //\r\n  const noDuplicates = (text) => {\r\n    return taskList.map((record) => record.toDo).includes(text);\r\n  };\r\n\r\n  // Add new task to the list //\r\n  const addTask = (txt) => {\r\n    if (txt.trim().length !== 0) {\r\n      txt = txt.trim();\r\n      // Convert first letter to capital\r\n      txt = txt.charAt(0).toUpperCase() + txt.slice(1);\r\n      console.log(txt);\r\n      let newId = id + 1;\r\n      const newTask = { ...task, id: id, toDo: txt };\r\n      const newTaskList = taskList.concat(newTask);\r\n      if (noDuplicates(txt)) {\r\n        alert('This task already exist!');\r\n        return;\r\n      } else {\r\n        setId(newId);\r\n        setTask(newTask);\r\n        setTaskList(newTaskList);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Remove record from list\r\n  function deleteTask(id) {\r\n    let counter = 0;\r\n    const newTaskList = taskList\r\n      .map((task) => {\r\n        if (id !== task.id) {\r\n          return { ...task, id: ++counter };\r\n        }\r\n        return null;\r\n      })\r\n      .filter(Boolean); // filter(Boolean) will delete null from list\r\n    setTaskList(newTaskList);\r\n    setId(++counter);\r\n  }\r\n\r\n  // CheckBox handler\r\n  const updateCheckBox = (id, checkField) => {\r\n    const newTaskList = taskList.map((record) => {\r\n      if (id === record.id) {\r\n        return { ...record, isDone: !checkField };\r\n      }\r\n      return record;\r\n    });\r\n    setTaskList(newTaskList);\r\n  };\r\n\r\n  // Clear All\r\n  const clearHandle = () => {\r\n    setTaskList([]);\r\n    setTask({ ...task, toDo: 'Empty', isDone: false });\r\n    setId(1);\r\n  };\r\n\r\n  // Refresh list\r\n  const reorderHandle = () => {\r\n    let newTaskList = [];\r\n    let counter = 0;\r\n    taskList.forEach((record) => {\r\n      counter++;\r\n      newTaskList.push({ ...record, id: counter });\r\n    });\r\n    setTaskList(newTaskList);\r\n    setId(++counter);\r\n  };\r\n\r\n  return (\r\n    <div className='ToDoList'>\r\n      <div className='appHeader'>\r\n        <Adding addTask={addTask} />\r\n        <ReorderClear clearHandle={clearHandle} reorderHandle={reorderHandle} />\r\n      </div>\r\n\r\n      <div className='list'>\r\n        {taskList.map((record) => {\r\n          return (\r\n            <ToDo\r\n              key={record.toDo}\r\n              handleCheck={updateCheckBox}\r\n              deleteTask={deleteTask}\r\n              {...record}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","//import { useState } from 'react';\nimport './App.css';\nimport ToDoList from './components/ToDoList';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header>ToDo List</header>\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}